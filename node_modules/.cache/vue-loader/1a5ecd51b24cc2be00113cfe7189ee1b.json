{"remainingRequest":"/Users/jhoy/Development/quiz/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jhoy/Development/quiz/src/components/QuestionBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jhoy/Development/quiz/src/components/QuestionBox.vue","mtime":1566761241860},{"path":"/Users/jhoy/Development/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jhoy/Development/quiz/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jhoy/Development/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jhoy/Development/quiz/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash'\nexport default {\n    props: {\n        currentQuestion: Object,\n        next: Function,\n        increment: Function,\n        statusQuiz: String\n    },\n    data() {\n        return {\n            selectedIndex: null,\n            shuffledAnswers: [],\n            answerCorrectIndex: null,\n            answered: false,\n            numQuestion : 1\n        }\n    },\n    computed: {\n        answers() {\n            let answers = [...this.currentQuestion.incorrect_answers]\n            answers.push(this.currentQuestion.correct_answer)\n            return answers\n        },\n        isDisabledSubmit(){\n            return this.selectedIndex == null\n        }\n    },\n    watch: {\n        currentQuestion: {\n            immediate: true,\n            handler() {\n                this.selectedIndex = null\n                this.answerCorrectIndex = null\n                this.shuffleAnswers()\n                this.answered = false\n            }\n        }\n    },\n    methods: {\n        selectAnswer(index){\n            this.selectedIndex = index\n            this.answered = false            \n        },\n        shuffleAnswers(){\n            let answers = [...this.currentQuestion.incorrect_answers, this.currentQuestion.correct_answer]\n            this.shuffledAnswers = _.shuffle(answers)\n            this.answerCorrectIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\n        },\n        submitAnswer(){\n            this.increment(this.answerCorrectIndex === this.selectedIndex)\n            this.answered = true\n            \n        },\n        classSubmitAnswer(index){\n            let classAnswer = ''\n            if (this.selectedIndex === index){\n                classAnswer = 'selected'\n            }\n            if (this.selectedIndex === index && this.answerCorrectIndex  === index && this.answered){\n                classAnswer = 'correct'\n            }\n\n            if (this.selectedIndex === index && this.answerCorrectIndex  !== index && this.answered){\n                classAnswer = 'incorrect'\n            }\n            return classAnswer;\n        }\n    },\n}\n",{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"QuestionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"question-box-container\">\n         <b-jumbotron>\n            <h4 v-html=\"currentQuestion.question\"></h4>\n            <hr class=\"my-4\">\n            <b-list-group>\n                <b-list-group-item \n                    v-for=\"(answer,index) in answers\" \n                    :key=\"index\"\n                    @click.prevent=\"selectAnswer(index)\"\n                    :class=\"classSubmitAnswer(index)\"\n                    v-html=\"answer\"\n                >{{ answer }}</b-list-group-item>\n            </b-list-group>\n            <b-button :disabled=\"isDisabledSubmit\" @click=\"submitAnswer\" variant=\"primary\" href=\"#\">Submit</b-button>\n        </b-jumbotron>\n    </div>\n</template>\n<script>\nimport _ from 'lodash'\nexport default {\n    props: {\n        currentQuestion: Object,\n        next: Function,\n        increment: Function,\n        statusQuiz: String\n    },\n    data() {\n        return {\n            selectedIndex: null,\n            shuffledAnswers: [],\n            answerCorrectIndex: null,\n            answered: false,\n            numQuestion : 1\n        }\n    },\n    computed: {\n        answers() {\n            let answers = [...this.currentQuestion.incorrect_answers]\n            answers.push(this.currentQuestion.correct_answer)\n            return answers\n        },\n        isDisabledSubmit(){\n            return this.selectedIndex == null\n        }\n    },\n    watch: {\n        currentQuestion: {\n            immediate: true,\n            handler() {\n                this.selectedIndex = null\n                this.answerCorrectIndex = null\n                this.shuffleAnswers()\n                this.answered = false\n            }\n        }\n    },\n    methods: {\n        selectAnswer(index){\n            this.selectedIndex = index\n            this.answered = false            \n        },\n        shuffleAnswers(){\n            let answers = [...this.currentQuestion.incorrect_answers, this.currentQuestion.correct_answer]\n            this.shuffledAnswers = _.shuffle(answers)\n            this.answerCorrectIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\n        },\n        submitAnswer(){\n            this.increment(this.answerCorrectIndex === this.selectedIndex)\n            this.answered = true\n            \n        },\n        classSubmitAnswer(index){\n            let classAnswer = ''\n            if (this.selectedIndex === index){\n                classAnswer = 'selected'\n            }\n            if (this.selectedIndex === index && this.answerCorrectIndex  === index && this.answered){\n                classAnswer = 'correct'\n            }\n\n            if (this.selectedIndex === index && this.answerCorrectIndex  !== index && this.answered){\n                classAnswer = 'incorrect'\n            }\n            return classAnswer;\n        }\n    },\n}\n</script>\n<style scoped>\n    .list-group{\n        margin-bottom: 15px;\n    } \n    .list-group-item:hover{\n        background-color: #EEE;\n        cursor: pointer;\n    } \n    .selected{\n        background-color: lightblue;\n    }\n    .correct{\n        background-color: lightgreen;\n    }\n    .incorrect{\n        background-color: red;\n        color:white;\n    }\n    .btn {\n        margin: 0 5px;\n    }   \n</style>"]}]}